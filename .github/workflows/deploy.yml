name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    
permissions:
  contents: read
  packages: write
  checks: write # Quyền để báo cáo trạng thái kiểm tra

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME: ghcr.io/valius256/photonpiano-api
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: "Host=localhost;Port=5432;Database=photonpiano;Username=postgres;Password=12345"
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: anhphatdeptrai
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: 🏗️ Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore

      - name: ✅ Run Tests
        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME }} --all-tags
          
  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up SSH keys
      - name: Set up SSH keys
        run: |
          # Create the SSH directory
          mkdir -p ~/.ssh
          
          # Add SSH private key to the file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add GitHub to the known hosts to prevent SSH verification errors
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          
          # Optionally, add your server's IP to known_hosts for a more secure connection
          ssh-keyscan -t rsa ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      # Step 2: Deploy to server via SSH
      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }} # Optional, only if your SSH private key is encrypted
          script: |
            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Stop and remove the old containers if they exist
            docker stop photonpiano-api || true
            docker rm photonpiano-api || true
            docker stop photonpiano-database || true
            docker rm photonpiano-database || true
            
            # Pull the new image from GHCR
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker pull postgres:latest
            
            # Run the Postgres container
            docker run -d --name photonpiano-database \
            -e POSTGRES_DB=photonpiano \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=12345 \
            -p 5432:5432 \
            --restart unless-stopped \
            postgres:latest
            
            # Run the new container
            docker run -d --name photonpiano-api \
              -p 8080:8080 \
              -e POSTGRES_CONNECTION="Host=localhost;Port=5432;Database=photonpiano;Username=postgres;Password=12345" \
              -e ASPNETCORE_ENVIRONMENT="Production" \
              -e DOTNET_ENVIRONMENT="Production" \
              -e Firebase__Auth__ApiKey="${{ secrets.FIREBASE_API_KEY }}" \
              -e Firebase__Auth__Authority="${{ secrets.FIREBASE_AUTHORITY }}" \
              -e Firebase__Auth__Issuer="${{ secrets.FIREBASE_ISSUER }}" \
              -e Firebase__Auth__Audience="${{ secrets.FIREBASE_AUDIENCE }}" \
              -e VNPAY__BASEURL="${{ secrets.FIREBASE_AUDIENCE }}" \
              -e VNPAY__TMNCODE="${{ secrets.VNPAY_TMNCODE }}" \
              -e VNPAY__HASHSECRET="${{ secrets.VNPAY_HASHSECRET }}" \
              -e VNPAY__RETURNURL="${{ secrets.VNPAY_RETURNURL }}" \
              -e VNPAY__CURRCODE="${{ secrets.VNPAY_CURRCODE }}" \
              -e VNPAY__LOCALE="${{ secrets.VNPAY_LOCALE }}" \
              -e VNPAY__TIMEZONEID="${{ secrets.VNPAY_TIMEZONEID }}" \
              -e VNPAY__VERSION="${{ secrets.VNPAY_VERSION }}" \
              -e VNPAY__COMMAND="${{ secrets.VNPAY_COMMAND }}" \
              -e Logging__LogLevel__Hangfire="Debug" \
              -e Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command="Information" \
              --restart unless-stopped \
              ${{ env.IMAGE_NAME }}:latest
