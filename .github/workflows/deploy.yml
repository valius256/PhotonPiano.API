name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write # Quy·ªÅn ƒë·ªÉ b√°o c√°o tr·∫°ng th√°i ki·ªÉm tra

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME: ghcr.io/valius256/photonpiano-api
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  PINATA__JWTTOKEN: ${{ secrets.PINATA_JWTTOKEN }}
  PINATA__GATEWAYBASEURL: ${{ secrets.PINATA_GATEWAYBASEURL }}
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: üèóÔ∏è Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore
#      i commment this cause the issue with get token by google has limit 
#      - name: ‚úÖ Run Tests
#        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME }} --all-tags
          
  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          script: |
            cd /root/photonpiano
            docker-compose --version || { echo "Docker Compose kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!"; exit 1; }
            docker-compose pull photonpiano-api photonpiano-database
            docker-compose down --remove-orphans --volumes
            docker-compose up -d --force-recreate --renew-anon-volumes
            docker ps --filter "name=api" --filter "status=running" || { echo "API container kh√¥ng ch·∫°y!"; exit 1; }
            docker ps --filter "name=database" --filter "status=running" || { echo "Database container kh√¥ng ch·∫°y!"; exit 1; }
       
            docker info || { echo "Docker kh√¥ng ch·∫°y!"; exit 1; }

            # Pull c√°c image m·ªõi
            docker-compose pull photonpiano-api photonpiano-database

            # D·ª´ng c√°c services hi·ªán t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            docker-compose down --remove-orphans --volumes

            # Kh·ªüi ƒë·ªông l·∫°i c√°c containers v·ªõi c·∫•u h√¨nh v√† image m·ªõi
            docker-compose up -d --force-recreate --renew-anon-volumes

            # ƒê·∫£m b·∫£o r·∫±ng c·∫£ hai services ƒë·ªÅu ƒëang ho·∫°t ƒë·ªông
            docker ps --filter "name=photonpiano-api" --filter "status=running" || { echo "photonpiano-api kh√¥ng ho·∫°t ƒë·ªông!"; exit 1; }
            docker ps --filter "name=photonpiano-database" --filter "status=running" || { echo "photonpiano-database kh√¥ng ho·∫°t ƒë·ªông!"; exit 1; }

            # Ki·ªÉm tra t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa container
            docker inspect --format '{{.State.Health.Status}}' photonpiano-api | grep "healthy" || { echo "photonpiano-api kh√¥ng kh·ªèe!"; exit 1; }
            docker inspect --format '{{.State.Health.Status}}' photonpiano-database | grep "healthy" || { echo "photonpiano-database kh√¥ng kh·ªèe!"; exit 1; }
  