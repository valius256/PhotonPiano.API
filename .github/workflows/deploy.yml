name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write # Quyền để báo cáo trạng thái kiểm tra

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME_API: ghcr.io/valius256/photonpiano-api
  IMAGE_NAME_WEB: ghcr.io/minhtrantuan3112/photonpiano-webapp
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  PINATA__JWTTOKEN: ${{ secrets.PINATA_JWTTOKEN }}
  JWTAUTH__KEY: ${{ secrets.JWTAUTH_KEY }}
  JWTAUTH__ISSUER: ${{ secrets.JWTAUTH_ISSUER }}
  JWTAUTH__AUDIENCE: ${{ secrets.JWTAUTH_AUDIENCE }}
  JWTAUTH__DURATIONINDAYS: ${{ secrets.JWT_AUTH_DURATIONINDAYS }}
  CONNECTIONSTRINGS__REDISCONNECTIONSTRINGS: ${{ secrets.REDIS_CONNECTION_STRING }}
  PINATA__GATEWAYBASEURL: ${{ secrets.PINATA_GATEWAYBASEURL }}
  PINATA__DEFAULTGROUPID: ${{ secrets.PINATA_DEFAULTGROUPID }}
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-22.04 #cause the wkhtmltopdf is worked as expected on this version
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: 🏗️ Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore

#      - name: ✅ Run Tests
#        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal
  
  
  
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Login to GitHub Container Registry (Frontend)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: minhtrantuan3112
          password: ${{ secrets.GHFE_TOKEN }}

      - name: 🏗️ Build and Push Docker Images
        run: |
          # Build API
          docker build -t ${{ env.IMAGE_NAME_API }}:latest -t ${{ env.IMAGE_NAME_API }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME_API }} --all-tags
  
  

  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -e # Stop script on error

            # Kiểm tra xem Prometheus và Grafana có đang chạy không
            PROMETHEUS_RUNNING=$(docker ps -q -f name=prometheus)
            GRAFANA_RUNNING=$(docker ps -q -f name=grafana)

            # Dừng và xóa container PhotonPiano nếu đang chạy
            cd ~/photonpiano || true
            docker compose -p photonpiano down || true

            # Kiểm tra nếu Prometheus không chạy thì mới xóa các image liên quan đến Prometheus
            if [ -z "$PROMETHEUS_RUNNING" ]; then
                echo "Prometheus is not running, proceeding with cleanup."
                # Clean old images của Prometheus
                docker images | grep ghcr.io/prometheus/prometheus | awk '{print $3}' | xargs -r docker rmi -f
            else
                echo "Prometheus is running, skipping image removal for Prometheus."
            fi

            # Kiểm tra nếu Grafana không chạy thì mới xóa các image liên quan đến Grafana
            if [ -z "$GRAFANA_RUNNING" ]; then
                echo "Grafana is not running, proceeding with cleanup."
                # Clean old images của Grafana
                docker images | grep ghcr.io/grafana/grafana | awk '{print $3}' | xargs -r docker rmi -f
            else
                echo "Grafana is running, skipping image removal for Grafana."
            fi

            # Clean Docker garbage
            docker system prune -af --volumes

            # Tạo thư mục cho deployment nếu chưa có
            mkdir -p ~/photonpiano ~/photonpiano/prometheus ~/photonpiano/frontend
            cd ~/photonpiano

            # Tạo file cấu hình cho Prometheus
            cat > prometheus.yml <<EOF
            global:
              scrape_interval: 15s
              evaluation_interval: 15s
            scrape_configs:
              - job_name: 'photonpiano-api'
                metrics_path: /metrics
                static_configs:
                  - targets: ['photonpiano-api:8080']
              - job_name: 'vps-system'
                static_configs:
                  - targets: ['node-exporter:9100']
              - job_name: 'photonpiano-api-probe'
                metrics_path: /probe
                params:
                  module: [http_2xx]
                static_configs:
                  - targets: ['http://photonpiano-api:8080']
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: blackbox-exporter:9115
            EOF

            # Tạo cấu hình cho Blackbox exporter
            cat > blackbox.yml <<EOF
            modules:
              http_health:
                prober: http
                timeout: 5s
                http:
                  method: GET
                  path: /health
                  valid_status_codes: [200]
                  fail_if_not_ssl: false
            EOF

            # Tạo file .env cho backend
            cat > .env <<EOF
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_CONNECTION=${{ secrets.POSTGRES_CONNECTION }}
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            # (thêm các biến môi trường khác nếu cần)
            EOF

            # Tạo file .env cho frontend
            cat > ~/photonpiano/frontend/.env <<EOF
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            # (thêm các biến môi trường frontend khác nếu cần)
            EOF

            # Tạo docker-compose.yml cho deployment
            if [ -z "$PROMETHEUS_RUNNING" ] && [ -z "$GRAFANA_RUNNING" ]; then
                echo "Prometheus and Grafana are not running, using full configuration with monitoring."
                cat > docker-compose.yml <<EOF
            version: "3.8"
            services:
              photonpiano-database:
                image: postgres:15
                container_name: photonpiano-database
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
                  POSTGRES_DB: photonpiano
                ports:
                  - "5432:5432"
                networks:
                  - app-network
              # (các dịch vụ khác bao gồm Prometheus và Grafana nếu cần)
            EOF
            else
                echo "Prometheus and Grafana are running, using app-only configuration."
                cat > docker-compose.yml <<EOF
            version: "3.8"
            services:
              photonpiano-database:
                image: postgres:15
                container_name: photonpiano-database
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
                  POSTGRES_DB: photonpiano
                ports:
                  - "5432:5432"
                networks:
                  - app-network
              # (các dịch vụ khác cho app không cần Prometheus và Grafana)
            EOF
            fi

            # Đăng nhập vào GitHub Container Registry
            echo "${{ secrets.GHFE_TOKEN }}" | docker login ghcr.io -u minhtrantuan3112 --password-stdin

            # Chuyển đến thư mục PhotonPiano và chạy lại Docker Compose
            cd ~/photonpiano || exit

            # Dừng Docker Compose hiện tại
            docker compose -p photonpiano down || true

            # Dừng container đang chạy từ image cũ (API)
            docker ps -q --filter "ancestor=ghcr.io/valius256/photonpiano-api" | xargs -r docker stop

            # Xóa container đang chạy từ image cũ (API)
            docker ps -a -q --filter "ancestor=ghcr.io/valius256/photonpiano-api" | xargs -r docker rm

            # Xóa image cũ cho API và Frontend
            docker images | grep ghcr.io/valius256/photonpiano-api | awk '{print $3}' | xargs -r docker rmi -f
            docker images | grep ghcr.io/minhtrantuan3112/photonpiano-webapp | awk '{print $3}' | xargs -r docker rmi -f

            # Làm sạch Docker
            docker system prune -af --volumes

            # Pull các image mới
            docker pull ghcr.io/valius256/photonpiano-api:latest
            docker pull ghcr.io/minhtrantuan3112/photonpiano-webapp:latest

            # Đưa container mới lên
            docker compose -p photonpiano up -d
