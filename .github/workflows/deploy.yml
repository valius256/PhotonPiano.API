name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write # Quyền để báo cáo trạng thái kiểm tra

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME_API: ghcr.io/valius256/photonpiano-api
  IMAGE_NAME_WEB: ghcr.io/minhtrantuan3112/photonpiano-webapp
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  PINATA__JWTTOKEN: ${{ secrets.PINATA_JWTTOKEN }}
  JWTAUTH__KEY: ${{ secrets.JWTAUTH_KEY }}
  JWTAUTH__ISSUER: ${{ secrets.JWTAUTH_ISSUER }}
  JWTAUTH__AUDIENCE: ${{ secrets.JWTAUTH_AUDIENCE }}
  JWTAUTH__DURATIONINDAYS: ${{ secrets.JWT_AUTH_DURATIONINDAYS }}
  CONNECTIONSTRINGS__REDISCONNECTIONSTRINGS: ${{ secrets.REDIS_CONNECTION_STRING }}
  PINATA__GATEWAYBASEURL: ${{ secrets.PINATA_GATEWAYBASEURL }}
  PINATA__DEFAULTGROUPID: ${{ secrets.PINATA_DEFAULTGROUPID }}
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-22.04 #cause the wkhtmltopdf is worked as expected on this version
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: 🏗️ Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore

#      - name: ✅ Run Tests
#        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal
  
  
  
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Login to GitHub Container Registry (Frontend)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: minhtrantuan3112
          password: ${{ secrets.GHFE_TOKEN }}

      - name: 🏗️ Build and Push Docker Images
        run: |
          # Build API
          docker build -t ${{ env.IMAGE_NAME_API }}:latest -t ${{ env.IMAGE_NAME_API }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME_API }} --all-tags
  
  
  
  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Dừng script nếu có lỗi
            
            # Đảm bảo docker-compose down trước
            cd ~/photonpiano || true && docker compose down || true
            
            # Xóa images cũ của backend và frontend
            docker images | grep ghcr.io/valius256/photonpiano-api | awk '{print $3}' | xargs -r docker rmi -f
            docker images | grep ghcr.io/minhtrantuan3112/photonpiano-webapp | awk '{print $3}' | xargs -r docker rmi -f
            
            # Dọn dẹp rác Docker
            docker system prune -af --volumes
    
            
            # Tạo directory cho deployment
            mkdir -p ~/photonpiano
            cd ~/photonpiano
            
          
#            # Tạo thư mục cho Blackbox 
#            cd ~/photonpiano
#            cat > blackbox.yml <<EOF
#            modules:
#              http_health:
#                prober: http
#                timeout: 5s
#                http:
#                  method: GET
#                  path: /health
#                  valid_status_codes: [200]
#                  fail_if_not_ssl: false
#            EOF
#            
#            # Tạo nội dung cho prometheus.yml
#            cat > ~/photonpiano/prometheus/prometheus.yml <<EOF
#            global:
#                scrape_interval: 15s
#                evaluation_interval: 15s
#            
#            scrape_configs:
#              # Giám sát API của PhotonPiano
#              - job_name: 'photonpiano-api'
#                metrics_path: /metrics
#                static_configs:
#                  - targets: ['photonpiano-api:8080']
#          
#              # Giám sát hệ thống VPS với node_exporter
#              - job_name: 'vps-system'
#                static_configs:
#                  - targets: ['node-exporter:9100']
#            
#              - job_name: 'photonpiano-api-probe'
#                metrics_path: /probe
#                params:
#                  module: [http_2xx]
#                static_configs:
#                  - targets: ['http://photonpiano-api:8080']
#                    labels:
#                      group: 'photonpiano-api' 
#                relabel_configs:
#                  - source_labels: [__address__]
#                    target_label: __param_target
#                  - source_labels: [__param_target]
#                    target_label: instance
#                  - target_label: __address__
#                    replacement: blackbox-exporter:9115
#            
#              - job_name: 'photonpiano-api-icmp'
#                metrics_path: /probe
#                params:
#                  module: [icmp]  
#                static_configs:
#                  - targets: ['photonpiano-api']
#                    labels:
#                      group: 'photonpiano-api'
#                relabel_configs:
#                  - source_labels: [__address__]
#                    target_label: __param_target
#                  - source_labels: [__param_target]
#                    target_label: instance
#                  - target_label: __address__
#                    replacement: blackbox-exporter:9115
#            EOF
            
            
            # Tạo .env file từ GitHub Secrets
            cat > .env <<EOF
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_CONNECTION=${{ secrets.POSTGRES_CONNECTION }}
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            FIREBASE_AUTHORITY=${{ secrets.FIREBASE_AUTHORITY }}
            FIREBASE_ISSUER=${{ secrets.FIREBASE_ISSUER }}
            FIREBASE_AUDIENCE=${{ secrets.FIREBASE_AUDIENCE }}
            VNPAY_BASEURL=${{ secrets.VNPAY_BASEURL }}
            VNPAY_TMNCODE=${{ secrets.VNPAY_TMNCODE }}
            VNPAY_HASHSECRET=${{ secrets.VNPAY_HASHSECRET }}
            VNPAY_RETURNURL=${{ secrets.VNPAY_RETURNURL }}
            VNPAY_CURRCODE=${{ secrets.VNPAY_CURRCODE }}
            VNPAY_LOCALE=${{ secrets.VNPAY_LOCALE }}
            JWTAUTH_KEY=${{ secrets.JWTAUTH_KEY }}
            JWTAUTH_ISSUER=${{ secrets.JWTAUTH_ISSUER }}
            JWTAUTH_AUDIENCE=${{ secrets.JWTAUTH_AUDIENCE }}
            JWTAUTH_DURATIONINDAYS=${{ secrets.JWTAUTH_DURATIONINDAYS }}
            VNPAY_TIMEZONEID=${{ secrets.VNPAY_TIMEZONEID }}
            VNPAY_VERSION=${{ secrets.VNPAY_VERSION }}
            VNPAY_COMMAND=${{ secrets.VNPAY_COMMAND }}
            PINATA_JWTTOKEN=${{ secrets.PINATA_JWTTOKEN }}
            PINATA_GATEWAYBASEURL=${{ secrets.PINATA_GATEWAYBASEURL }}
            REDIS_CONNECTION_STRING=${{ secrets.REDIS_CONNECTION_STRING }}
            PINATA_DEFAULTGROUPID=${{ secrets.PINATA_DEFAULTGROUPID }}
            EOF
            
            cat > ~/photonpiano/frontend/.env <<EOF
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_COOKIE_SECRET=${{ secrets.VITE_COOKIE_SECRET }}
            VITE_IS_DEVELOPMENT=${{ secrets.VITE_IS_DEVELOPMENT }}
            VITE_PINATA_API_KEY=${{ secrets.VITE_PINATA_API_KEY }}
            VITE_PINATA_API_SECRET=${{ secrets.VITE_PINATA_API_SECRET }}
            VITE_PINATA_GATEWAY_KEY=${{ secrets.VITE_PINATA_GATEWAY_KEY }}
            VITE_PINATA_GATEWAY_BASE_URL=${{ secrets.VITE_PINATA_GATEWAY_BASE_URL }}
            VITE_API_PUB_SUB_URL=${{ secrets.VITE_API_PUB_SUB_URL }}
            VITE_API_NOTIFICATION_URL=${{ secrets.VITE_API_NOTIFICATION_URL }}
            VITE_API_PROGRESS_URL=${{ secrets.VITE_API_PROGRESS_URL }}
            EOF
            
            # Viết docker-compose.yml
            cat > docker-compose.yml <<'EOF'
            version: "3.8"
            services:
              photonpiano-database:
                image: postgres:15
                container_name: photonpiano-database
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                  POSTGRES_DB: photonpiano
                ports:
                  - "5432:5432"
                volumes:
                  - /root/photonpiano/postgres-data:/var/lib/postgresql/data
                restart: unless-stopped
                networks:
                  - app-network
            
              photonpiano-api:
                image: ghcr.io/valius256/photonpiano-api:latest
                container_name: photonpiano-api
                restart: unless-stopped
                depends_on:
                  - photonpiano-database
                ports:
                  - "8080:8080"  # HTTP
                environment:
                  - ASPNETCORE_URLS=http://0.0.0.0:8080
                  - POSTGRES_CONNECTION=${POSTGRES_CONNECTION}
                  - HangfireConnectionString=${POSTGRES_CONNECTION}
                  - Firebase__Auth__ApiKey=${FIREBASE_API_KEY}
                  - Firebase__Auth__Authority=${FIREBASE_AUTHORITY}
                  - Firebase__Auth__Issuer=${FIREBASE_ISSUER}
                  - Firebase__Auth__Audience=${FIREBASE_AUDIENCE}
                  - VNPAY__BASEURL=${VNPAY_BASEURL}
                  - VNPAY__TMNCODE=${VNPAY_TMNCODE}
                  - VNPAY__HASHSECRET=${VNPAY_HASHSECRET}
                  - VNPAY__RETURNURL=${VNPAY_RETURNURL}
                  - VNPAY__CURRCODE=${VNPAY_CURRCODE}
                  - VNPAY__LOCALE=${VNPAY_LOCALE}
                  - VNPAY__TIMEZONEID=${VNPAY_TIMEZONEID}
                  - VNPAY__VERSION=${VNPAY_VERSION}
                  - VNPAY__COMMAND=${VNPAY_COMMAND}
                  - PINATA__JWTTOKEN=${PINATA_JWTTOKEN}
                  - JWTAUTH__KEY=${JWTAUTH_KEY}
                  - JWTAUTH__ISSUER=${JWTAUTH_ISSUER}
                  - JWTAUTH__AUDIENCE=${JWTAUTH_AUDIENCE}
                  - JWTAUTH__DURATIONINDAYS=${JWTAUTH_DURATIONINDAYS}
                  - PINATA__GATEWAYBASEURL=${PINATA_GATEWAYBASEURL}
                  - PINATA__DEFAULTGROUPID=${PINATA_DEFAULTGROUPID}
                  - CONNECTIONSTRINGS__REDISCONNECTIONSTRINGS=${REDIS_CONNECTION_STRING}
                  - Logging__LogLevel__Hangfire=Debug
                  - Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Information
                volumes:
                  - /root/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro
                  - /root/.aspnet/https:/https:ro
                networks:
                  - app-network 
            
              photonpiano-web:
                image: ghcr.io/minhtrantuan3112/photonpiano-webapp:latest
                container_name: photonpiano-web
                restart: unless-stopped
                depends_on:
                  - photonpiano-api
                ports:
                  - "3000:3000"
                networks:
                  - app-network
            
#              prometheus:
#                image: prom/prometheus:latest
#                container_name: prometheus
#                volumes:
#                  - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#                ports:
#                  - "9090:9090"
#                networks:
#                  - app-network
#                restart: unless-stopped
#              
#              grafana:
#                image: grafana/grafana:latest
#                container_name: grafana
#                ports:
#                  - "3001:3000"
#                volumes:
#                  - grafana-data:/var/lib/grafana
#                environment:
#                  - GF_SECURITY_ADMIN_USER=admin
#                  - GF_SECURITY_ADMIN_PASSWORD=admin
#                  - GF_SERVER_HTTP_PORT=3000
#                  - GF_DATASOURCE_NAME=Prometheus
#                  - GF_DATASOURCE_URL=http://prometheus:9090
#                depends_on:
#                  - prometheus
#                networks:
#                  - app-network
#                restart: unless-stopped
#              
#              node-exporter:
#                image: quay.io/prometheus/node-exporter:latest
#                container_name: node-exporter
#                ports:
#                  - "9100:9100"
#                networks:
#                  - app-network
#                restart: unless-stopped
#              
#              blackbox-exporter:
#                image: prom/blackbox-exporter:latest
#                container_name: blackbox-exporter
#                ports:
#                  - "9115:9115"
#                volumes:
#                  - ./blackbox.yml:/etc/blackbox.yml
#                networks:
#                  - app-network
#                restart: unless-stopped
#                # Add NET_RAW capability for ICMP probes
#                cap_add:
#                  - NET_RAW

            networks:
              app-network:
                driver: bridge
            
#            volumes:
#              grafana-data:
#                driver: local
            EOF
            
            # Đăng nhập vào GitHub Container Registry
             echo "${{ secrets.GHFE_TOKEN }}" | docker login ghcr.io -u minhtrantuan3112 --password-stdin
            
            # Pull images và deploy với project name cụ thể
            docker compose -p photonpiano pull
            docker compose -p photonpiano up -d --force-recreate