name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME_API: ghcr.io/valius256/photonpiano-api
  IMAGE_NAME_WEB: ghcr.io/minhtrantuan3112/photonpiano-webapp
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.VNPAY_BASEURL }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  PINATA__JWT: ${{ secrets.PINATA_JWTTOKEN }}
  JWTAUTH__KEY: ${{ secrets.JWTAUTH_KEY }}
  JWTAUTH__ISSUER: ${{ secrets.JWTAUTH_ISSUER }}
  JWTAUTH__AUDIENCE: ${{ secrets.JWTAUTH_AUDIENCE }}
  JWTAUTH__DURATIONINDAYS: ${{ secrets.JWTAUTH_DURATIONINDAYS }}
  CONNECTIONSTRINGS__REDISCONNECTIONSTRINGS: ${{ secrets.REDIS_CONNECTION_STRING }}
  PINATA__GATEWAYBASEURL: ${{ secrets.PINATA_GATEWAYBASEURL }}
  PINATA__DEFAULTGROUPID: ${{ secrets.PINATA_DEFAULTGROUPID }}
  
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: 🏗️ Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Login to GitHub Container Registry (Frontend)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: minhtrantuan3112
          password: ${{ secrets.GHFE_TOKEN }}

      - name: 🏗️ Build and Push Docker Images
        run: |
          docker build -t ${{ env.IMAGE_NAME_API }}:latest -t ${{ env.IMAGE_NAME_API }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME_API }} --all-tags

  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Tạo thư mục cho deployment nếu chưa có
            mkdir -p ~/photonpiano ~/photonpiano/prometheus ~/photonpiano/frontend
            cd ~/photonpiano

            # Tạo cấu hình cho Blackbox exporter
            cat > blackbox.yml <<EOF
            modules:
              http_2xx:
                prober: http
                timeout: 5s
                http:
                  method: GET
                  valid_status_codes: [200]
                  no_follow_redirects: false
              icmp:
                prober: icmp
                timeout: 5s
                icmp:
                  preferred_ip_protocol: ip4
            EOF

            # Tạo cấu hình cho Prometheus
            cat > prometheus/prometheus.yml <<EOF
            global:
              scrape_interval: 15s
              evaluation_interval: 15s
            scrape_configs:
              - job_name: 'photonpiano-api'
                metrics_path: /metrics
                static_configs:
                  - targets: ['photonpiano-api:8080']
              - job_name: 'vps-system'
                static_configs:
                  - targets: ['node-exporter:9100']
              - job_name: 'photonpiano-api-probe'
                metrics_path: /probe
                params:
                  module: [http_2xx]
                static_configs:
                  - targets: ['http://photonpiano-api:8080/']
                    labels:
                      group: 'photonpiano-api'
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: blackbox-exporter:9115
              - job_name: 'photonpiano-api-icmp'
                metrics_path: /probe
                params:
                  module: [icmp]
                static_configs:
                  - targets: ['photonpiano-api']
                    labels:
                      group: 'photonpiano-api'
                relabel_configs:
                  - source_labels: [__address__]
                    target_label: __param_target
                  - source_labels: [__param_target]
                    target_label: instance
                  - target_label: __address__
                    replacement: blackbox-exporter:9115
            EOF

            # Tạo file .env cho backend
            cat > .env <<EOF
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_CONNECTION=${{ secrets.POSTGRES_CONNECTION }}
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            Firebase__Auth__ApiKey=${{ secrets.FIREBASE_API_KEY }}
            Firebase__Auth__Authority=${{ secrets.FIREBASE_AUTHORITY }}
            Firebase__Auth__Issuer=${{ secrets.FIREBASE_ISSUER }}
            Firebase__Auth__Audience=${{ secrets.FIREBASE_AUDIENCE }}
            VNPAY__BASEURL=${{ secrets.VNPAY_BASEURL }}
            VNPAY__TMNCODE=${{ secrets.VNPAY_TMNCODE }}
            VNPAY__HASHSECRET=${{ secrets.VNPAY_HASHSECRET }}
            VNPAY__RETURNURL=${{ secrets.VNPAY_RETURNURL }}
            VNPAY__CURRCODE=${{ secrets.VNPAY_CURRCODE }}
            VNPAY__LOCALE=${{ secrets.VNPAY_LOCALE }}
            VNPAY__TIMEZONEID=${{ secrets.VNPAY_TIMEZONEID }}
            VNPAY__VERSION=${{ secrets.VNPAY_VERSION }}
            VNPAY__COMMAND=${{ secrets.VNPAY_COMMAND }}
            JWTAUTH__KEY=${{ secrets.JWTAUTH_KEY }}
            JWTAUTH__ISSUER=${{ secrets.JWTAUTH_ISSUER }}
            JWTAUTH__AUDIENCE=${{ secrets.JWTAUTH_AUDIENCE }}
            JWTAUTH__DURATIONINDAYS=${{ secrets.JWTAUTH_DURATIONINDAYS }}
            CONNECTIONSTRINGS__REDISCONNECTIONSTRINGS=${{ secrets.REDIS_CONNECTION_STRING }}
            PINATA__JWTTOKEN=${{ secrets.PINATA_JWTTOKEN }}
            PINATA__GATEWAYBASEURL=${{ secrets.PINATA_GATEWAYBASEURL }}
            PINATA__DEFAULTGROUPID=${{ secrets.PINATA_DEFAULTGROUPID }}
            ASPNETCORE_ENVIRONMENT=Development
            DOTNET_ENVIRONMENT=Development
            EOF

            # Tạo file .env cho frontend
            cat > frontend/.env <<EOF
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_COOKIE_SECRET=${{ secrets.VITE_COOKIE_SECRET }}
            VITE_IS_DEVELOPMENT=${{ secrets.VITE_IS_DEVELOPMENT }}
            VITE_PINATA_API_KEY=${{ secrets.VITE_PINATA_API_KEY }}
            VITE_PINATA_JWT=${{ secrets.VITE_PINATA_JWT }}
            VITE_PINATA_API_SECRET=${{ secrets.VITE_PINATA_API_SECRET }}
            VITE_PINATA_GATEWAY_KEY=${{ secrets.VITE_PINATA_GATEWAY_KEY }}
            VITE_PINATA_GATEWAY_BASE_URL=${{ secrets.VITE_PINATA_GATEWAY_BASE_URL }}
            VITE_API_PUB_SUB_URL=${{ secrets.VITE_API_PUB_SUB_URL }}
            VITE_API_NOTIFICATION_URL=${{ secrets.VITE_API_NOTIFICATION_URL }}
            VITE_API_PROGRESS_URL=${{ secrets.VITE_API_PROGRESS_URL }}
            EOF

            # Tạo docker-compose.yml
            cat > docker-compose.yml <<EOF
            version: "3.8"
            services:
              photonpiano-database:
                image: postgres:15
                container_name: photonpiano-database
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  POSTGRES_DB: photonpiano
                ports:
                  - "5432:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                restart: unless-stopped
                networks:
                  - app-network
              photonpiano-api:
                image: ${{ env.IMAGE_NAME_API }}:latest
                container_name: photonpiano-api
                env_file:
                  - .env
                ports:
                  - "8080:8080"
                depends_on:
                  - photonpiano-database
                restart: unless-stopped
                networks:
                  - app-network
              photonpiano-web:
                image: ${{ env.IMAGE_NAME_WEB }}:latest
                container_name: photonpiano-web
                env_file:
                  - frontend/.env
                ports:
                  - "3000:3000"
                depends_on:
                  - photonpiano-api
                restart: unless-stopped
                networks:
                  - app-network
              prometheus:
                image: prom/prometheus:latest
                container_name: prometheus
                dns:
                  - 8.8.8.8
                  - 8.8.4.4
                volumes:
                  - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
                  - prometheus_data:/prometheus
                ports:
                  - "9090:9090"
                restart: unless-stopped
                networks:
                  - app-network
              node-exporter:
                image: prom/node-exporter:latest
                container_name: node-exporter
                ports:
                  - "9100:9100"
                restart: unless-stopped
                networks:
                  - app-network
                volumes:
                  - /proc:/host/proc:ro
                  - /sys:/host/sys:ro
                  - /:/rootfs:ro
                command:
                  - '--path.procfs=/host/proc'
                  - '--path.sysfs=/host/sys'
                  - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
              blackbox-exporter:
                image: prom/blackbox-exporter:latest
                container_name: blackbox-exporter
                volumes:
                  - ./blackbox.yml:/etc/blackbox.yml
                command:
                  - '--config.file=/etc/blackbox.yml'
                ports:
                  - "9115:9115"
                restart: unless-stopped
                networks:
                  - app-network
                cap_add:
                  - NET_RAW
              grafana:
                image: grafana/grafana:latest
                container_name: grafana
                ports:
                  - "3001:3000"
                volumes:
                  - grafana_data:/var/lib/grafana
                environment:
                  - GF_SECURITY_ADMIN_USER=admin
                  - GF_SECURITY_ADMIN_PASSWORD=admin
                restart: unless-stopped
                networks:
                  - app-network
            volumes:
              postgres_data:
              prometheus_data:
              grafana_data:
            networks:
              app-network:
                driver: bridge
            EOF

            # Đăng nhập vào GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "${{ secrets.GHFE_TOKEN }}" | docker login ghcr.io -u minhtrantuan3112 --password-stdin

            # Dừng container cũ
            docker compose -p photonpiano down

            # Xóa image cũ nếu không còn container sử dụng
            docker images -q ${{ env.IMAGE_NAME_API }} | sort -u | xargs -r docker rmi -f || true
            docker images -q ${{ env.IMAGE_NAME_WEB }} | sort -u | xargs -r docker rmi -f || true

            # Làm sạch Docker
            docker system prune -f --volumes

            # Pull các image mới
            docker pull ${{ env.IMAGE_NAME_API }}:latest
            docker pull ${{ env.IMAGE_NAME_WEB }}:latest

            # Khởi động lại toàn bộ dịch vụ
            docker compose -p photonpiano up -d --remove-orphans