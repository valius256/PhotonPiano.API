name: Build, Test & Deploy .NET 9 API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME: ghcr.io/valius256/photonpiano-api
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Production
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: anhphatdeptrai
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 15s --health-timeout 10s --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: Build
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore

      - name: Check PostgreSQL Health
        run: |
          sleep 10  # Đợi PostgreSQL sẵn sàng
          docker ps -a | grep postgres
          pg_isready -h localhost -p 5432 -U postgres

      - name: Run Tests with Testcontainers
        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal
        timeout-minutes: 10

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test  # Chỉ chạy nếu build-and-test thành công
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Chỉ chạy khi push lên main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .

      - name: Push Docker Images
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
