name: Build, Test & Deploy .NET 9 API Photon Piano

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write # Quyền để báo cáo trạng thái kiểm tra

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME: ghcr.io/valius256/photonpiano-api
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  POSTGRES_CONNECTION: ${{ secrets.POSTGRES_CONNECTION }}
  ASPNETCORE_ENVIRONMENT: Development
  DOTNET_ENVIRONMENT: Development
  Firebase__Auth__ApiKey: ${{ secrets.FIREBASE_API_KEY }}
  Firebase__Auth__Authority: ${{ secrets.FIREBASE_AUTHORITY }}
  Firebase__Auth__Issuer: ${{ secrets.FIREBASE_ISSUER }}
  Firebase__Auth__Audience: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__BASEURL: ${{ secrets.FIREBASE_AUDIENCE }}
  VNPAY__TMNCODE: ${{ secrets.VNPAY_TMNCODE }}
  VNPAY__HASHSECRET: ${{ secrets.VNPAY_HASHSECRET }}
  VNPAY__RETURNURL: ${{ secrets.VNPAY_RETURNURL }}
  VNPAY__CURRCODE: ${{ secrets.VNPAY_CURRCODE }}
  VNPAY__LOCALE: ${{ secrets.VNPAY_LOCALE }}
  VNPAY__TIMEZONEID: ${{ secrets.VNPAY_TIMEZONEID }}
  VNPAY__VERSION: ${{ secrets.VNPAY_VERSION }}
  VNPAY__COMMAND: ${{ secrets.VNPAY_COMMAND }}
  Logging__LogLevel__Hangfire: Debug
  Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command: Information
  GITHUB_ACTIONS: "true"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: photonpiano
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 9 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore PhotonPiano.API.sln

      - name: 🏗️ Build Project
        run: dotnet build PhotonPiano.API.sln --configuration Release --no-restore
#      i commment this cause the issue with get token by google has limit 
#      - name: ✅ Run Tests
#        run: dotnet test PhotonPiano.API.sln --configuration Release --no-build --verbosity normal

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f PhotonPiano.Api/Dockerfile .
          docker push ${{ env.IMAGE_NAME }} --all-tags

  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}
          script: |
            # Install Docker Compose and NGINX
            sudo apt-get update
            sudo apt-get install -y docker-compose nginx certbot python3-certbot-nginx
            
            # Configure NGINX for HTTPS with DuckDNS subdomain and SignalR support
            sudo bash -c 'cat > /etc/nginx/sites-available/photonpiano <<EOF
            server {
                listen 80;
                server_name photonpiano.duckdns.org;
                return 301 https://\$host\$request_uri;
            }
            
            server {
                listen 443 ssl;
                listen [::]:443 ssl;
                server_name photonpiano.duckdns.org;
            
                ssl_certificate /etc/letsencrypt/live/photonpiano.duckdns.org/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/photonpiano.duckdns.org/privkey.pem;
                include /etc/letsencrypt/options-ssl-nginx.conf;
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
            
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-GCM-SHA256";
                ssl_prefer_server_ciphers on;
            
                location /pubsub {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
            
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            
                location /notification {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
            
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            
                location /progress {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
            
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF'
            
            # Enable NGINX configuration and restart
            sudo ln -sf /etc/nginx/sites-available/photonpiano /etc/nginx/sites-enabled/photonpiano
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl restart nginx
            
            # Stop and remove existing containers
            docker stop photonpiano-database photonpiano-api photonpiano.cache || true
            docker rm photonpiano-database photonpiano-api photonpiano.cache || true
            
            # Create directory for deployment
            mkdir -p ~/photonpiano
            cd ~/photonpiano
            
            # Write docker-compose.yml
            cat > docker-compose.yml <<EOF
            version: '3.8'
            services:
              photonpiano.database:
                image: postgres:15
                container_name: photonpiano-database
                environment:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: 12345
                  POSTGRES_DB: photonpiano
                ports:
                  - "5432:5432"
                volumes:
                  - /root/photonpiano/postgres-data:/var/lib/postgresql/data
                restart: unless-stopped
                networks:
                  - app-network
            
              photonpiano.api:
                image: ghcr.io/valius256/photonpiano-api:latest
                container_name: photonpiano-api
                restart: unless-stopped
                depends_on:
                  - photonpiano.database
                ports:
                  - "8080:8080"
                environment:
                  - ASPNETCORE_URLS=http://0.0.0.0:8080
                  - ASPNETCORE_ENVIRONMENT=Production
                  - DOTNET_ENVIRONMENT=Production
                  - POSTGRES_CONNECTION= ${{ secrets.POSTGRES_CONNECTION }}
                  - ConnectionStrings__RedisConnectionStrings=photonpiano.cache:6379
                  - HangfireConnectionString= ${{ secrets.POSTGRES_CONNECTION }}
                  - Firebase__Auth__ApiKey=${{ secrets.FIREBASE_API_KEY }}
                  - Firebase__Auth__Authority=${{ secrets.FIREBASE_AUTHORITY }}
                  - Firebase__Auth__Issuer=${{ secrets.FIREBASE_ISSUER }}
                  - Firebase__Auth__Audience=${{ secrets.FIREBASE_AUDIENCE }}
                  - VNPAY__BASEURL=${{ secrets.VNPAY_BASEURL }}
                  - VNPAY__TMNCODE=${{ secrets.VNPAY_TMNCODE }}
                  - VNPAY__HASHSECRET=${{ secrets.VNPAY_HASHSECRET }}
                  - VNPAY__RETURNURL=${{ secrets.VNPAY_RETURNURL }}
                  - VNPAY__CURRCODE=${{ secrets.VNPAY_CURRCODE }}
                  - VNPAY__LOCALE=${{ secrets.VNPAY_LOCALE }}
                  - VNPAY__TIMEZONEID=${{ secrets.VNPAY_TIMEZONEID }}
                  - VNPAY__VERSION=${{ secrets.VNPAY_VERSION }}
                  - VNPAY__COMMAND=${{ secrets.VNPAY_COMMAND }}
            
                volumes:
                  - /root/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro
                pull_policy: always
                networks:
                  - app-network
            
              photonpiano.cache:
                image: redis:6.2
                container_name: photonpiano.cache
                ports:
                  - "6379:6379"
                restart: unless-stopped
                networks:
                  - app-network
            
            networks:
              app-network:
                driver: bridge
            EOF
            
            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull images and deploy
            docker-compose pull
            docker-compose up -d --force-recreate