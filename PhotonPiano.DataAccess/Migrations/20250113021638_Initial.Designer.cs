// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113021638_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountFirebaseId = "admin001",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "admin001@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 13, 9, 16, 34, 247, DateTimeKind.Utc).AddTicks(2288),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 3,
                            ShortDescription = "",
                            Status = 0
                        },
                        new
                        {
                            AccountFirebaseId = "teacher002",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "teacher002@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 13, 9, 16, 34, 247, DateTimeKind.Utc).AddTicks(5182),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 2,
                            ShortDescription = "",
                            Status = 0
                        },
                        new
                        {
                            AccountFirebaseId = "learner003",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "learner003@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 13, 9, 16, 34, 247, DateTimeKind.Utc).AddTicks(5227),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 1,
                            ShortDescription = "",
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47b2c3ed-dad8-4d54-a3bd-3bee9cb28034"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 249, DateTimeKind.Utc).AddTicks(8521),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Nhịp điệu",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("fea78172-8b5c-47af-b28b-694ac0334ba9"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(800),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Độ chính xác",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("05776306-2b57-46ed-a2c7-a899dd455b90"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(808),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Âm Sắc",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("32bcc581-2e93-45c5-9900-eff617ca5835"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(826),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Phong thái",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("3a18f95f-8883-4fca-ab5f-0ce797c27525"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(829),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 1",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("dcc4f011-0754-4c75-9a29-492242d8168a"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(833),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 2",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("7feac8e7-9a70-4d2c-94c9-85201657721c"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(837),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 1",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("c6296210-d674-424e-afb5-70d8ba348351"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1344),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 2",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("ae55de23-727e-46ab-9fc9-074e935a3c89"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1353),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Điểm chuyên cần",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("c8eb48fc-0823-4876-ba72-3fc80191f24c"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1357),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Nhịp điệu)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("dc9b3d1f-0f58-4efc-886d-8e2674d81eea"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1361),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Độ chính xác)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("7d81bd50-f27b-454e-9232-26ecaefda3a5"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1398),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Âm sắc)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("51ba2ab3-8db3-4e77-8d9c-dfafea43cb4e"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(1403),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Phong thái)",
                            RecordStatus = 1,
                            Weight = 15m
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5956dbb0-d7ea-4f4b-ac3c-c4c29b683491"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(7253),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("6e568a0e-d3c5-447c-8eef-cfc1928f20b2"),
                            RoomName = "Room 1",
                            Shift = 0,
                            StartTime = new DateTime(2025, 1, 13, 6, 16, 34, 250, DateTimeKind.Utc).AddTicks(9188)
                        },
                        new
                        {
                            Id = new Guid("832031aa-162a-4a03-9426-cf3155dfc886"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 251, DateTimeKind.Utc).AddTicks(4406),
                            CreatedById = "admin001",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("e739039d-08c0-44c4-82f8-76ea1505883a"),
                            RoomName = "Room 2",
                            Shift = 2,
                            StartTime = new DateTime(2025, 1, 13, 6, 16, 34, 251, DateTimeKind.Utc).AddTicks(4425)
                        },
                        new
                        {
                            Id = new Guid("b78e4a34-9472-4659-89b2-a353cb680473"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 251, DateTimeKind.Utc).AddTicks(4439),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("002b095e-16ab-4a7a-883f-03fc8091c914"),
                            Shift = 4,
                            StartTime = new DateTime(2025, 1, 13, 6, 16, 34, 251, DateTimeKind.Utc).AddTicks(4441)
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf99069e-ac05-4e23-93c9-33bfbf931913"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 252, DateTimeKind.Utc).AddTicks(9056),
                            CreatedById = "admin001",
                            CriteriaId = new Guid("fea78172-8b5c-47af-b28b-694ac0334ba9"),
                            EntranceTestStudentId = new Guid("9a7cebb8-aaf0-426a-acfb-05bda862df6a"),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a7cebb8-aaf0-426a-acfb-05bda862df6a"),
                            BandScore = 5m,
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 252, DateTimeKind.Utc).AddTicks(347),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("5956dbb0-d7ea-4f4b-ac3c-c4c29b683491"),
                            IsScoreAnnounced = true,
                            Rank = 1,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("720af896-14f5-4704-ae75-3d74c04a7b00"),
                            BandScore = 4m,
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 252, DateTimeKind.Utc).AddTicks(7036),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("5956dbb0-d7ea-4f4b-ac3c-c4c29b683491"),
                            IsScoreAnnounced = true,
                            Rank = 2,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("216c5971-1f4e-463f-8358-8c9a389a1f45"),
                            BandScore = 5m,
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 252, DateTimeKind.Utc).AddTicks(7087),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("5956dbb0-d7ea-4f4b-ac3c-c4c29b683491"),
                            IsScoreAnnounced = true,
                            Rank = 3,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e568a0e-d3c5-447c-8eef-cfc1928f20b2"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(4335),
                            CreatedById = "admin001",
                            Name = "Room 1",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("e739039d-08c0-44c4-82f8-76ea1505883a"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(5152),
                            CreatedById = "admin001",
                            Name = "Room 2",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("002b095e-16ab-4a7a-883f-03fc8091c914"),
                            CreatedAt = new DateTime(2025, 1, 13, 9, 16, 34, 250, DateTimeKind.Utc).AddTicks(5156),
                            CreatedById = "admin001",
                            Name = "Room 3",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedRoom");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");
                });
#pragma warning restore 612, 618
        }
    }
}
