// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250118063713_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DesiredLevel")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("DesiredTargets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("FavoriteMusicGenres")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PreferredLearningMethods")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountFirebaseId = "admin001",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(7159),
                            DesiredTargets = new List<string>(),
                            Email = "admin001@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(2973),
                            Level = 0,
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 3,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "admin001"
                        },
                        new
                        {
                            AccountFirebaseId = "teacher002",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(8530),
                            DesiredTargets = new List<string>(),
                            Email = "teacher002@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(8435),
                            Level = 0,
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 2,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "teacher002"
                        },
                        new
                        {
                            AccountFirebaseId = "learner003",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(8541),
                            DesiredTargets = new List<string>(),
                            Email = "learner003@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 18, 13, 37, 11, 417, DateTimeKind.Utc).AddTicks(8533),
                            Level = 0,
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 1,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "learner003"
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdb29b99-f330-418b-be53-03877e2175a4"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(5982),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Nhịp điệu",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("78b1473c-7cb1-4fb4-851f-72356ffa4b49"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7685),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Độ chính xác",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("06101999-4e29-4899-a7d4-8d07c0148ab0"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7692),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Âm Sắc",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("5d972ff2-c4a9-498d-99c3-31d223b9de01"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7717),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Phong thái",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("d0505756-4ff0-41b7-ab20-bfcf6e73b43d"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7720),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 1",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("baab5b74-1437-4dfa-9f02-700411544cb1"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7829),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 2",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("93d82c26-7a6b-4144-af6c-cbfde397a035"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7833),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 1",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("3ce87432-6178-4989-a1fa-bd8e4d2fbe92"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7837),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 2",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("b1eed4cd-2c93-49bf-8636-fcf5f78f3aad"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7840),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Điểm chuyên cần",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("ee8009e6-3a14-4cad-9043-503af94e681e"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7844),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Nhịp điệu)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("5e24a9cd-9e75-45f3-86c7-9844ee8537e6"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(7849),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Độ chính xác)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("56576ec9-06c6-4bb3-97d8-2e250edae5c3"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(8927),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Âm sắc)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("79623dcc-139d-4855-a7be-2358d3f3524c"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 419, DateTimeKind.Utc).AddTicks(8934),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Phong thái)",
                            RecordStatus = 1,
                            Weight = 15m
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b5c38a7-f779-425f-be62-c7dd3bde9154"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(5067),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 18),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            Name = "EntranceTest 1",
                            RecordStatus = 1,
                            RoomId = new Guid("8350cec2-c292-4dbe-ac36-c0a3363aab35"),
                            RoomName = "Room 1",
                            Shift = 0
                        },
                        new
                        {
                            Id = new Guid("44c644b8-3bbe-45d9-9678-63fbda6f661d"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(7898),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 18),
                            Fee = 0m,
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            Name = "EntranceTest 2",
                            RecordStatus = 1,
                            RoomId = new Guid("cee9f19d-e1b6-4e4d-8018-b84c772b106a"),
                            RoomName = "Room 2",
                            Shift = 2
                        },
                        new
                        {
                            Id = new Guid("92367354-0d49-42f4-af00-b992d07323dc"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(7910),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 18),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            Name = "EntranceTest 3",
                            RecordStatus = 1,
                            RoomId = new Guid("0bce3484-a841-4948-b6d9-f58a6e41dd26"),
                            Shift = 4
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9712dde8-2428-4b6c-8fc3-a3c6c13540f5"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 421, DateTimeKind.Utc).AddTicks(3334),
                            CreatedById = "admin001",
                            CriteriaId = new Guid("78b1473c-7cb1-4fb4-851f-72356ffa4b49"),
                            EntranceTestStudentId = new Guid("8bee5351-79e7-4636-89ed-91e1c4bbb1e2"),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bee5351-79e7-4636-89ed-91e1c4bbb1e2"),
                            BandScore = 9m,
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(9233),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("3b5c38a7-f779-425f-be62-c7dd3bde9154"),
                            IsScoreAnnounced = true,
                            Rank = 1,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("74cc656d-fd5e-484a-acf3-f986fe24cbed"),
                            BandScore = 5m,
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 421, DateTimeKind.Utc).AddTicks(2351),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("3b5c38a7-f779-425f-be62-c7dd3bde9154"),
                            IsScoreAnnounced = true,
                            Rank = 2,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("337c8719-11c8-416a-a6a4-1de3a3334951"),
                            BandScore = 3m,
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 421, DateTimeKind.Utc).AddTicks(2368),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("3b5c38a7-f779-425f-be62-c7dd3bde9154"),
                            IsScoreAnnounced = true,
                            Rank = 3,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("New");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceiverFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("SenderFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ReceiverFirebaseId");

                    b.HasIndex("SenderFirebaseId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8350cec2-c292-4dbe-ac36-c0a3363aab35"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(2743),
                            CreatedById = "admin001",
                            Name = "Room 1",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cee9f19d-e1b6-4e4d-8018-b84c772b106a"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(3507),
                            CreatedById = "admin001",
                            Name = "Room 2",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0bce3484-a841-4948-b6d9-f58a6e41dd26"),
                            CreatedAt = new DateTime(2025, 1, 18, 13, 37, 11, 420, DateTimeKind.Utc).AddTicks(3510),
                            CreatedById = "admin001",
                            Name = "Room 3",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("AttemptStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "StudentFirebaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("SlotStudent");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScorePublished")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentClassScore");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("Id");

                    b.HasIndex("TutionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedClasses")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorClasses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedDayOffs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedDayOffs")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedDayOffs")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletednNews")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatednNews")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Receiver")
                        .WithMany("ReceiverNotifications")
                        .HasForeignKey("ReceiverFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Sender")
                        .WithMany("SenderNotifications")
                        .HasForeignKey("SenderFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedSlotStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedSlotStudents")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Slot", "Slot")
                        .WithMany("SlotStudents")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "StudentAccount")
                        .WithMany("SlotStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedSlotStudents")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Slot");

                    b.Navigation("StudentAccount");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedStudentClass")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedStudentClass")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedStudentClass")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("StudentClassScoreCriterias")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("StudentClassScores")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedTransaction")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("Transactions")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Tution", "Tution")
                        .WithMany("TransactionTutions")
                        .HasForeignKey("TutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("Tutions")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedDayOffs");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedRoom");

                    b.Navigation("CreatedSlotStudents");

                    b.Navigation("CreatedStudentClass");

                    b.Navigation("CreatedTransaction");

                    b.Navigation("DeletedClasses");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedDayOffs");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("DeletedSlotStudents");

                    b.Navigation("DeletedStudentClass");

                    b.Navigation("DeletednNews");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorClasses");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("ReceiverNotifications");

                    b.Navigation("SenderNotifications");

                    b.Navigation("SlotStudents");

                    b.Navigation("StudentClasses");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedDayOffs");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");

                    b.Navigation("UpdatedSlotStudents");

                    b.Navigation("UpdatedStudentClass");

                    b.Navigation("UpdatednNews");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("StudentClassScoreCriterias");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Navigation("SlotStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Navigation("StudentClassScores");

                    b.Navigation("Tutions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Navigation("TransactionTutions");
                });
#pragma warning restore 612, 618
        }
    }
}
