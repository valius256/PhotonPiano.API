// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250315104051_Adjust_Table_Level_And_Fix_Seed_Data_For_Table_Level_And_SystemConfig")]
    partial class Adjust_Table_Level_And_Fix_Seed_Data_For_Table_Level_And_SystemConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DesiredLevel")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("DesiredTargets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("FavoriteMusicGenres")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PreferredLearningMethods")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.HasIndex("CurrentClassId");

                    b.HasIndex("LevelId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountFirebaseId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("AccountNotification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("json");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StaffConfirmNote")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScorePublished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartTime")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<double?>("TheoraticalScore")
                        .HasColumnType("double precision");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.LearnerSurvey", b =>
                {
                    b.Property<string>("LearnerId")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("SurveyQuestionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMultipleAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.PrimitiveCollection<List<string>>("Answers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LearnerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LearnerId", "SurveyQuestionId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("LearnerSurvey");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGenreDivided")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinimumPracticalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MinimumTheoreticalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NextLevelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PricePerSlot")
                        .HasColumnType("numeric");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("SkillsEarned")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("SlotPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSlots")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NextLevelId")
                        .IsUnique();

                    b.ToTable("Level");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("New");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountFirebaseId");

                    b.HasIndex("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherNote")
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "StudentFirebaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("SlotStudent");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentClassScore");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMultipleAnswers")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<double?>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("Id");

                    b.HasIndex("TutionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tuition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Tuition");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "CurrentClass")
                        .WithMany()
                        .HasForeignKey("CurrentClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Level", "Level")
                        .WithMany("Accounts")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentClass");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Account")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("AccountFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Notification", "Notification")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Application", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "ApprovedBy")
                        .WithMany("ApprovedApplications")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedApplications")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedApplications")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdatedBy")
                        .WithMany("UpdatedApplications")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApprovedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedClasses")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorClasses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Level", "Level")
                        .WithMany("Classes")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Level");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedDayOffs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedDayOffs")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedDayOffs")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Level", "Level")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Level");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.LearnerSurvey", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Account")
                        .WithMany("LearnerSurveys")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.SurveyQuestion", "SurveyQuestion")
                        .WithMany("LearnerSurveys")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Level", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Level", "NextLevel")
                        .WithOne()
                        .HasForeignKey("PhotonPiano.DataAccess.Models.Entity.Level", "NextLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NextLevel");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletednNews")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatednNews")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", null)
                        .WithMany("ReceiverNotifications")
                        .HasForeignKey("AccountFirebaseId");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedSlotStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedSlotStudents")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Slot", "Slot")
                        .WithMany("SlotStudents")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "StudentAccount")
                        .WithMany("SlotStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedSlotStudents")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Slot");

                    b.Navigation("StudentAccount");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedStudentClass")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedStudentClass")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedStudentClass")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("StudentClassScoreCriterias")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("StudentClassScores")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SurveyQuestion", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedSurveyQuestions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdatedBy")
                        .WithMany("UpdatedSurveyQuestions")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedTransaction")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("Transactions")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Tuition", "Tution")
                        .WithMany("TransactionTuitions")
                        .HasForeignKey("TutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tuition", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("Tutions")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("AccountNotifications");

                    b.Navigation("ApprovedApplications");

                    b.Navigation("CreatedApplications");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedDayOffs");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedRoom");

                    b.Navigation("CreatedSlotStudents");

                    b.Navigation("CreatedStudentClass");

                    b.Navigation("CreatedSurveyQuestions");

                    b.Navigation("CreatedTransaction");

                    b.Navigation("DeletedApplications");

                    b.Navigation("DeletedClasses");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedDayOffs");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("DeletedSlotStudents");

                    b.Navigation("DeletedStudentClass");

                    b.Navigation("DeletednNews");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorClasses");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("LearnerSurveys");

                    b.Navigation("ReceiverNotifications");

                    b.Navigation("SlotStudents");

                    b.Navigation("StudentClasses");

                    b.Navigation("UpdatedApplications");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedDayOffs");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");

                    b.Navigation("UpdatedSlotStudents");

                    b.Navigation("UpdatedStudentClass");

                    b.Navigation("UpdatedSurveyQuestions");

                    b.Navigation("UpdatednNews");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("StudentClassScoreCriterias");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Level", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Classes");

                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Navigation("AccountNotifications");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Navigation("SlotStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Navigation("StudentClassScores");

                    b.Navigation("Tutions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SurveyQuestion", b =>
                {
                    b.Navigation("LearnerSurveys");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tuition", b =>
                {
                    b.Navigation("TransactionTuitions");
                });
#pragma warning restore 612, 618
        }
    }
}
