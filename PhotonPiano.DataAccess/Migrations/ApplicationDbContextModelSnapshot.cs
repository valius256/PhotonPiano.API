// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountFirebaseId = "admin001",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "admin001@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 14, 14, 17, 22, 273, DateTimeKind.Utc).AddTicks(4756),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 3,
                            ShortDescription = "",
                            Status = 0
                        },
                        new
                        {
                            AccountFirebaseId = "teacher002",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "teacher002@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 14, 14, 17, 22, 273, DateTimeKind.Utc).AddTicks(9623),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 2,
                            ShortDescription = "",
                            Status = 0
                        },
                        new
                        {
                            AccountFirebaseId = "learner003",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            Email = "learner003@gmail.com",
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 14, 14, 17, 22, 273, DateTimeKind.Utc).AddTicks(9676),
                            Level = 0,
                            Phone = "",
                            RecordStatus = 1,
                            Role = 1,
                            ShortDescription = "",
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94b2ff90-98e5-4fff-85db-81ad3aea51c3"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 275, DateTimeKind.Utc).AddTicks(9653),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Nhịp điệu",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("7b1d8d50-5fd7-4a42-a3b2-56d2f8a22471"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(3963),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Độ chính xác",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("880c74d2-3123-49c9-8849-77c3b6afa7ad"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(3977),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Âm Sắc",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("75cf1df3-4245-4ea1-93ee-01f66610d1f6"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4019),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Phong thái",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("78d60c14-bc73-4259-9233-0c9f825a6e39"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4024),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 1",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("31c0d07b-8fec-4efa-81e3-482680d7d3ae"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4029),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 2",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("37c7d950-525b-4141-a90d-2b7841cbcf38"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4035),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 1",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("e21b8580-eb2a-4022-a86b-b4841ac32028"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4040),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 2",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("a71538ad-0dc1-476f-a718-588298ec4dad"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4046),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Điểm chuyên cần",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("e059f8b5-5ab2-4ef8-bad4-024faffec328"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4072),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Nhịp điệu)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("e07419cf-3e26-4f57-a57b-f2ed1097a732"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4077),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Độ chính xác)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("5c4d2b35-107f-44bc-837b-18bfd71caf00"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4083),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Âm sắc)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("6c9f2798-e2f4-4d7c-8b89-0de936f5fc09"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(4088),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Phong thái)",
                            RecordStatus = 1,
                            Weight = 15m
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72c2905c-437f-43c9-b812-c059824141f7"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 277, DateTimeKind.Utc).AddTicks(599),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 14),
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("6d71c5ac-34e4-47ca-a40e-1b531ccd447a"),
                            RoomName = "Room 1",
                            Shift = 0
                        },
                        new
                        {
                            Id = new Guid("1a7abe08-758a-431d-a088-119e27cf0c1d"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 277, DateTimeKind.Utc).AddTicks(5022),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 14),
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("fc5bdcec-ecea-4a45-9bca-8d9303511078"),
                            RoomName = "Room 2",
                            Shift = 2
                        },
                        new
                        {
                            Id = new Guid("2d0bf0b6-2e3c-454a-bb8d-d1370a58a817"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 277, DateTimeKind.Utc).AddTicks(5055),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 14),
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            IsOpen = true,
                            RecordStatus = 1,
                            RoomId = new Guid("9b49a0f8-f4a2-442b-b92c-e1a7933989b5"),
                            Shift = 4
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b208b8a-cf91-429d-b6b9-5aaa9614006f"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 278, DateTimeKind.Utc).AddTicks(7242),
                            CreatedById = "admin001",
                            CriteriaId = new Guid("7b1d8d50-5fd7-4a42-a3b2-56d2f8a22471"),
                            EntranceTestStudentId = new Guid("c1ba379f-aa95-4d8b-80e2-10de374668f8"),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1ba379f-aa95-4d8b-80e2-10de374668f8"),
                            BandScore = 3m,
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 277, DateTimeKind.Utc).AddTicks(8513),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("72c2905c-437f-43c9-b812-c059824141f7"),
                            IsScoreAnnounced = true,
                            Rank = 1,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("4737f7b3-2f18-4883-a477-e73b4d4b2d84"),
                            BandScore = 8m,
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 278, DateTimeKind.Utc).AddTicks(5476),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("72c2905c-437f-43c9-b812-c059824141f7"),
                            IsScoreAnnounced = true,
                            Rank = 2,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("9096a950-16df-4a97-a472-fedc87a92308"),
                            BandScore = 3m,
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 278, DateTimeKind.Utc).AddTicks(5691),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("72c2905c-437f-43c9-b812-c059824141f7"),
                            IsScoreAnnounced = true,
                            Rank = 3,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d71c5ac-34e4-47ca-a40e-1b531ccd447a"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(6979),
                            CreatedById = "admin001",
                            Name = "Room 1",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("fc5bdcec-ecea-4a45-9bca-8d9303511078"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(8271),
                            CreatedById = "admin001",
                            Name = "Room 2",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("9b49a0f8-f4a2-442b-b92c-e1a7933989b5"),
                            CreatedAt = new DateTime(2025, 1, 14, 14, 17, 22, 276, DateTimeKind.Utc).AddTicks(8277),
                            CreatedById = "admin001",
                            Name = "Room 3",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedRoom");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");
                });
#pragma warning restore 612, 618
        }
    }
}
