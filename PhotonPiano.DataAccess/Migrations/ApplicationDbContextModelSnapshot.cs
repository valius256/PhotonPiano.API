// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DesiredLevel")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("DesiredTargets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("FavoriteMusicGenres")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PreferredLearningMethods")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountFirebaseId = "admin001",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 95, DateTimeKind.Utc).AddTicks(9530),
                            DesiredTargets = new List<string>(),
                            Email = "admin001@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 30, 12, 59, 10, 95, DateTimeKind.Utc).AddTicks(7556),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 3,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "admin001"
                        },
                        new
                        {
                            AccountFirebaseId = "teacher002",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 96, DateTimeKind.Utc).AddTicks(786),
                            DesiredTargets = new List<string>(),
                            Email = "teacher002@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 30, 12, 59, 10, 96, DateTimeKind.Utc).AddTicks(759),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 2,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "teacher002"
                        },
                        new
                        {
                            AccountFirebaseId = "learner003",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 96, DateTimeKind.Utc).AddTicks(797),
                            DesiredTargets = new List<string>(),
                            Email = "learner003@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 30, 12, 59, 10, 96, DateTimeKind.Utc).AddTicks(790),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 1,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "learner003"
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountFirebaseId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("AccountNotification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScorePublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44252e22-d30c-49e0-bab3-d71da7888e42"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(7108),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsPublic = true,
                            IsScorePublished = false,
                            Level = 2,
                            Name = "Class 1",
                            RecordStatus = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c2f05422-4011-4552-866a-4c57c6bc5e6b"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(8709),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsPublic = true,
                            IsScorePublished = false,
                            Level = 3,
                            Name = "Class 2",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("def5cdb7-6019-42dd-9b5e-3f432fc14572"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(1765),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Nhịp điệu",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("a24e3d85-55d8-423e-b7d1-263c09733d44"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3152),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Độ chính xác",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("30386aa3-a684-4861-b790-92829a861858"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3161),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Âm Sắc",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("b170b08c-cb80-4a94-80d3-2cd93948955f"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3169),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Phong thái",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("95b3bb4b-5085-4b0e-8a56-bbe5368ef341"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3172),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 1",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("5b43f584-6ce3-4151-b7c3-b764e17b7311"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3176),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 2",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("0099e1c3-cdd3-4512-914d-d4d92b586282"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3201),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 1",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("715a6221-1406-4365-8572-5d33d9a749c4"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3205),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 2",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("2e209368-a835-443d-9ae4-be6ada302869"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3209),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Điểm chuyên cần",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("ae185c70-de84-4a93-b516-14d4a793caf1"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3214),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Nhịp điệu)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("ead79e25-7c2f-47a4-ad30-bc7ec9d21d12"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3217),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Độ chính xác)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("529d043d-f2b6-4943-8caf-472a6593babc"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3220),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Âm sắc)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("182b7158-82e9-41a0-8f68-03443c87442f"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(3223),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Phong thái)",
                            RecordStatus = 1,
                            Weight = 15m
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("466ea66b-f04b-4d40-acb5-c8123c73f4c5"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(7140),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 30),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 1",
                            RecordStatus = 1,
                            RoomId = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            RoomName = "Room 1",
                            Shift = 0
                        },
                        new
                        {
                            Id = new Guid("790defe7-8df2-42fe-aca1-b41b78a2ccb8"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(9136),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 30),
                            Fee = 0m,
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 2",
                            RecordStatus = 1,
                            RoomId = new Guid("30bda2b2-0663-4c26-bb0c-ef6f46c9f196"),
                            RoomName = "Room 2",
                            Shift = 2
                        },
                        new
                        {
                            Id = new Guid("0a680cc3-6a0a-469f-98a3-d81b6104ba55"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(9150),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 30),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 3",
                            RecordStatus = 1,
                            RoomId = new Guid("ef8bc71f-aa3b-40a8-a060-41ffc8310d95"),
                            Shift = 4
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c5a3274-af29-4d8c-8d23-3572c5c0e33b"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(5139),
                            CreatedById = "admin001",
                            CriteriaId = new Guid("a24e3d85-55d8-423e-b7d1-263c09733d44"),
                            EntranceTestStudentId = new Guid("00c77746-4bbe-4fb1-886b-ea457c20eb56"),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00c77746-4bbe-4fb1-886b-ea457c20eb56"),
                            BandScore = 8m,
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(393),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("466ea66b-f04b-4d40-acb5-c8123c73f4c5"),
                            IsScoreAnnounced = true,
                            Rank = 1,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("38265f58-6aa7-469d-98c0-08278d5c2cb8"),
                            BandScore = 4m,
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(4135),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("466ea66b-f04b-4d40-acb5-c8123c73f4c5"),
                            IsScoreAnnounced = true,
                            Rank = 2,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("2ff97b07-f959-4f57-821c-970c16fd49c1"),
                            BandScore = 9m,
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(4171),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("466ea66b-f04b-4d40-acb5-c8123c73f4c5"),
                            IsScoreAnnounced = true,
                            Rank = 3,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("New");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountFirebaseId");

                    b.HasIndex("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(5485),
                            CreatedById = "admin001",
                            Name = "Room 1",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("30bda2b2-0663-4c26-bb0c-ef6f46c9f196"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(6028),
                            CreatedById = "admin001",
                            Name = "Room 2",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ef8bc71f-aa3b-40a8-a060-41ffc8310d95"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 97, DateTimeKind.Utc).AddTicks(6054),
                            CreatedById = "admin001",
                            Name = "Room 3",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("Slot");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c54aca9-2c9c-4e95-9fa9-07aa804c785e"),
                            ClassId = new Guid("44252e22-d30c-49e0-bab3-d71da7888e42"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 98, DateTimeKind.Utc).AddTicks(9848),
                            Date = new DateOnly(2025, 1, 30),
                            RecordStatus = 1,
                            RoomId = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("463ebc9c-be4a-4725-9e85-164e06be03b2"),
                            ClassId = new Guid("44252e22-d30c-49e0-bab3-d71da7888e42"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(1031),
                            Date = new DateOnly(2025, 2, 1),
                            RecordStatus = 1,
                            RoomId = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("88ec7b30-0459-4b58-931c-3952406d8cff"),
                            ClassId = new Guid("44252e22-d30c-49e0-bab3-d71da7888e42"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(1063),
                            Date = new DateOnly(2025, 2, 3),
                            RecordStatus = 1,
                            RoomId = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a3a26349-221a-4948-a4cf-254c262b9d85"),
                            ClassId = new Guid("44252e22-d30c-49e0-bab3-d71da7888e42"),
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(1067),
                            Date = new DateOnly(2025, 2, 5),
                            RecordStatus = 1,
                            RoomId = new Guid("a07832ea-c6b6-4f4e-814f-33ab1ccbaa0f"),
                            Shift = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "StudentFirebaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("SlotStudent");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentClassScore");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91e8bce6-d9fa-41ea-8e5a-89843d32eaa9"),
                            ConfigName = "Sĩ số lớp tối thiểu",
                            ConfigValue = "8",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(1656),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("588a9356-a5c7-4abd-baa3-d0217e65aa34"),
                            ConfigName = "Sĩ số lớp tối đa",
                            ConfigValue = "12",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2328),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("ab8b8206-7dcf-4274-935a-8ab26d70b4b5"),
                            ConfigName = "Mức phí theo buổi LEVEL 1",
                            ConfigValue = "200000",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2333),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("23d55201-72fa-432b-90bd-6e0ab46a434d"),
                            ConfigName = "Mức phí theo buổi LEVEL 2",
                            ConfigValue = "250000",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2335),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("401055d2-982b-49b1-9461-9f61e46344ad"),
                            ConfigName = "Mức phí theo buổi LEVEL 3",
                            ConfigValue = "300000",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2338),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("34439bc9-1a31-4ac1-9488-80cdbca4c648"),
                            ConfigName = "Mức phí theo buổi LEVEL 4",
                            ConfigValue = "350000",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2340),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("0303605d-8a35-488f-8b9d-d234820f6e0d"),
                            ConfigName = "Mức phí theo buổi LEVEL 5",
                            ConfigValue = "400000",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2342),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("d933049c-1c30-4485-bda0-498e6fb75f3b"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 1",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2352),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("911bd95d-5bab-4755-9f96-a9f952017d3c"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 2",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2355),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("7bf46634-8ada-4964-b349-243bc5d306f5"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 3",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2357),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f2aeb834-8cb0-44dc-aa21-aacbe9826b78"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 4",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2360),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("759ac9be-29a6-483b-82ae-43dc76b62aee"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 5",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2362),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("9b92d0dc-f918-4bc6-99d0-f512428784c7"),
                            ConfigName = "Tổng số buổi học LEVEL 1",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2365),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("155910d3-5cab-4834-815f-34c8d74b8685"),
                            ConfigName = "Tổng số buổi học LEVEL 2",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2367),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f81776c4-191b-40bf-a047-ff11e6e7c341"),
                            ConfigName = "Tổng số buổi học LEVEL 3",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2370),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("b05cdfa9-de7e-48d1-978b-3de7a957f6ea"),
                            ConfigName = "Tổng số buổi học LEVEL 4",
                            ConfigValue = "40",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2376),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f378fab9-9048-47a9-9920-d12ebe2eede5"),
                            ConfigName = "Tổng số buổi học LEVEL 5",
                            ConfigValue = "50",
                            CreatedAt = new DateTime(2025, 1, 30, 12, 59, 10, 99, DateTimeKind.Utc).AddTicks(2378),
                            RecordStatus = 1,
                            Role = 3
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("Id");

                    b.HasIndex("TutionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Account")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("AccountFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Notification", "Notification")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedClasses")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorClasses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedDayOffs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedDayOffs")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedDayOffs")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletednNews")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatednNews")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", null)
                        .WithMany("ReceiverNotifications")
                        .HasForeignKey("AccountFirebaseId");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedSlotStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedSlotStudents")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Slot", "Slot")
                        .WithMany("SlotStudents")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "StudentAccount")
                        .WithMany("SlotStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedSlotStudents")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Slot");

                    b.Navigation("StudentAccount");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedStudentClass")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedStudentClass")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedStudentClass")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("StudentClassScoreCriterias")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("StudentClassScores")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedTransaction")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("Transactions")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Tution", "Tution")
                        .WithMany("TransactionTutions")
                        .HasForeignKey("TutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("Tutions")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("AccountNotifications");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedDayOffs");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedRoom");

                    b.Navigation("CreatedSlotStudents");

                    b.Navigation("CreatedStudentClass");

                    b.Navigation("CreatedTransaction");

                    b.Navigation("DeletedClasses");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedDayOffs");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("DeletedSlotStudents");

                    b.Navigation("DeletedStudentClass");

                    b.Navigation("DeletednNews");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorClasses");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("ReceiverNotifications");

                    b.Navigation("SlotStudents");

                    b.Navigation("StudentClasses");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedDayOffs");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");

                    b.Navigation("UpdatedSlotStudents");

                    b.Navigation("UpdatedStudentClass");

                    b.Navigation("UpdatednNews");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("StudentClassScoreCriterias");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Navigation("AccountNotifications");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Navigation("SlotStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Navigation("StudentClassScores");

                    b.Navigation("Tutions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Navigation("TransactionTutions");
                });
#pragma warning restore 612, 618
        }
    }
}
