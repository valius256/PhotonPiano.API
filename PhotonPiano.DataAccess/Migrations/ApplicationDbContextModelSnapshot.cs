// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotonPiano.DataAccess.Models;

#nullable disable

namespace PhotonPiano.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DesiredLevel")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("DesiredTargets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("FavoriteMusicGenres")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PreferredLearningMethods")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("AccountFirebaseId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountFirebaseId = "admin001",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(8453),
                            DesiredTargets = new List<string>(),
                            Email = "admin001@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(7583),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 3,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "admin001"
                        },
                        new
                        {
                            AccountFirebaseId = "teacher002",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9172),
                            DesiredTargets = new List<string>(),
                            Email = "teacher002@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9162),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 2,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "teacher002"
                        },
                        new
                        {
                            AccountFirebaseId = "learner003",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9190),
                            DesiredTargets = new List<string>(),
                            Email = "learner003@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9173),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 1,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "learner003"
                        },
                        new
                        {
                            AccountFirebaseId = "gnRssA2sZHWnXB23oUuUxwz95Ln1",
                            Address = "",
                            AvatarUrl = "",
                            BankAccount = "",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9194),
                            DesiredTargets = new List<string>(),
                            Email = "staff123@gmail.com",
                            FavoriteMusicGenres = new List<string>(),
                            IsEmailVerified = false,
                            JoinedDate = new DateTime(2025, 1, 31, 9, 7, 57, 871, DateTimeKind.Utc).AddTicks(9191),
                            Phone = "",
                            PreferredLearningMethods = new List<string>(),
                            RecordStatus = 1,
                            Role = 4,
                            ShortDescription = "",
                            Status = 0,
                            UserName = "staff 123"
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountFirebaseId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("AccountNotification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScorePublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = new Guid("344122a9-50aa-4e5c-b95a-abda904c0de2"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(1766),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsPublic = true,
                            IsScorePublished = false,
                            Level = 2,
                            Name = "Class 1",
                            RecordStatus = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("97ddf810-f672-4e85-9440-97913c2c7509"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(2676),
                            CreatedById = "admin001",
                            InstructorId = "teacher002",
                            IsPublic = true,
                            IsScorePublished = false,
                            Level = 3,
                            Name = "Class 2",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("For")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f846c3f-4ae7-4efa-88f7-0538402dec1b"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(4231),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Nhịp điệu",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("315599b5-4a8d-4698-9182-449a7761eae7"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5157),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Độ chính xác",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("c632e746-1dad-43a0-af6b-82d9a2c18579"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5161),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Âm Sắc",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("8f9ffccb-7905-4c1d-a3f1-214be1ce7368"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5164),
                            CreatedById = "admin001",
                            For = 0,
                            Name = "Phong thái",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("b1cef04e-356d-422c-8abe-007d496c314f"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5166),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 1",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("50c66354-db13-4d4f-9352-836fedde29f0"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5168),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Kiểm tra nhỏ 2",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("5eb77d0b-993f-47af-90a4-5d928c16ae6d"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5170),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 1",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("73e91e4d-2037-4d4e-babe-f37a783c0067"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5172),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Bài thi 2",
                            RecordStatus = 1,
                            Weight = 10m
                        },
                        new
                        {
                            Id = new Guid("acfa91c0-b9c4-4d2c-a882-0ddee908d6ff"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5173),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Điểm chuyên cần",
                            RecordStatus = 1,
                            Weight = 5m
                        },
                        new
                        {
                            Id = new Guid("6e1e4892-7486-43f4-b67a-45e2d6501c22"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5180),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Nhịp điệu)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("db9fcc3a-2b8e-4784-ae10-6db690753c5b"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5192),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Độ chính xác)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("b2274cea-4202-4a3c-986b-e6e686c12bfe"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5194),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Âm sắc)",
                            RecordStatus = 1,
                            Weight = 15m
                        },
                        new
                        {
                            Id = new Guid("0d08ea4a-64ae-4999-9799-b0b835af75a0"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(5196),
                            CreatedById = "admin001",
                            For = 1,
                            Name = "Thi cuối kỳ (Phong thái)",
                            RecordStatus = 1,
                            Weight = 15m
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("InstructorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnnouncedScore")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCapacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa7d1aa5-54fa-440f-840b-15f54d9c48ee"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(6785),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 31),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 1",
                            RecordStatus = 1,
                            RoomId = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            RoomName = "Room 1",
                            Shift = 0
                        },
                        new
                        {
                            Id = new Guid("7836a33c-905d-4e2a-8532-dc3537f3ec0e"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(7746),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 31),
                            Fee = 0m,
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 2",
                            RecordStatus = 1,
                            RoomId = new Guid("ceb11168-a50a-4480-9220-a7911e7f40f6"),
                            RoomName = "Room 2",
                            Shift = 2
                        },
                        new
                        {
                            Id = new Guid("39bfdc00-5888-4e3b-a93d-64a287ee7ec9"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(7752),
                            CreatedById = "admin001",
                            Date = new DateOnly(2025, 1, 31),
                            Fee = 0m,
                            InstructorId = "teacher002",
                            IsAnnouncedScore = false,
                            Name = "EntranceTest 3",
                            RecordStatus = 1,
                            RoomId = new Guid("47c85c7b-8b0d-4a38-95f4-55fb02fe9553"),
                            Shift = 4
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriteriaName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestResult");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8407adb-7dcd-4b32-b23f-ecb9337bfe3d"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(619),
                            CreatedById = "admin001",
                            CriteriaId = new Guid("315599b5-4a8d-4698-9182-449a7761eae7"),
                            EntranceTestStudentId = new Guid("9d87daca-2fcc-479b-a5b3-ff12d2346a78"),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BandScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("EntranceTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsScoreAnnounced")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("EntranceTestId");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("EntranceTestStudent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d87daca-2fcc-479b-a5b3-ff12d2346a78"),
                            BandScore = 8m,
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(8354),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("aa7d1aa5-54fa-440f-840b-15f54d9c48ee"),
                            IsScoreAnnounced = true,
                            Rank = 1,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("02e83e9d-a419-4b23-be79-8950ab769507"),
                            BandScore = 9m,
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(133),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("aa7d1aa5-54fa-440f-840b-15f54d9c48ee"),
                            IsScoreAnnounced = true,
                            Rank = 2,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("01393f8f-f24f-46b3-9b19-cd577558b4c8"),
                            BandScore = 6m,
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(153),
                            CreatedById = "admin001",
                            EntranceTestId = new Guid("aa7d1aa5-54fa-440f-840b-15f54d9c48ee"),
                            IsScoreAnnounced = true,
                            Rank = 3,
                            RecordStatus = 1,
                            StudentFirebaseId = "learner003",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Id");

                    b.HasIndex("UpdateById");

                    b.ToTable("New");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountFirebaseId");

                    b.HasIndex("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(6006),
                            CreatedById = "admin001",
                            Name = "Room 1",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ceb11168-a50a-4480-9220-a7911e7f40f6"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(6295),
                            CreatedById = "admin001",
                            Name = "Room 2",
                            RecordStatus = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("47c85c7b-8b0d-4a38-95f4-55fb02fe9553"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 872, DateTimeKind.Utc).AddTicks(6297),
                            CreatedById = "admin001",
                            Name = "Room 3",
                            RecordStatus = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("Slot");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e13a813-19b1-4081-a0e0-6ecbacc25d6c"),
                            ClassId = new Guid("344122a9-50aa-4e5c-b95a-abda904c0de2"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(3102),
                            Date = new DateOnly(2025, 1, 31),
                            RecordStatus = 1,
                            RoomId = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("df327c7a-5cad-488e-b742-42923a0788bc"),
                            ClassId = new Guid("344122a9-50aa-4e5c-b95a-abda904c0de2"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(3738),
                            Date = new DateOnly(2025, 2, 2),
                            RecordStatus = 1,
                            RoomId = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c8b1a605-5662-4ec0-b63c-8145e4eb6bc4"),
                            ClassId = new Guid("344122a9-50aa-4e5c-b95a-abda904c0de2"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(3751),
                            Date = new DateOnly(2025, 2, 4),
                            RecordStatus = 1,
                            RoomId = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            Shift = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6f7170e3-e576-4397-912f-6f1590c5c41f"),
                            ClassId = new Guid("344122a9-50aa-4e5c-b95a-abda904c0de2"),
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(3753),
                            Date = new DateOnly(2025, 2, 6),
                            RecordStatus = 1,
                            RoomId = new Guid("ce4a4685-e47f-4183-bff6-4a905a7d2aea"),
                            Shift = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId", "StudentFirebaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("SlotStudent");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("character varying(30)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("numeric");

                    b.Property<string>("InstructorComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StudentFirebaseId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdateById")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("StudentFirebaseId");

                    b.HasIndex("UpdateById");

                    b.ToTable("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentClassScore");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b24b502-e7c3-4b9d-bbf9-f5e47330142b"),
                            ConfigName = "Sĩ số lớp tối thiểu",
                            ConfigValue = "8",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4086),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("d0aebc82-8cb8-4379-80c3-55f24aae8017"),
                            ConfigName = "Sĩ số lớp tối đa",
                            ConfigValue = "12",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4461),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("5d992461-d08e-4e05-b798-527a55133d81"),
                            ConfigName = "Mức phí theo buổi LEVEL 1",
                            ConfigValue = "200000",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4468),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("5d717046-d87b-4be9-bea8-1ce81e9cf058"),
                            ConfigName = "Mức phí theo buổi LEVEL 2",
                            ConfigValue = "250000",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4470),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("1cfb8865-f729-4701-ba47-40a44b1f3605"),
                            ConfigName = "Mức phí theo buổi LEVEL 3",
                            ConfigValue = "300000",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4471),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("916d9924-5c07-4bda-a624-e55907a224a1"),
                            ConfigName = "Mức phí theo buổi LEVEL 4",
                            ConfigValue = "350000",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4473),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("ed4e47fc-1506-4a0d-a672-f5525a74562f"),
                            ConfigName = "Mức phí theo buổi LEVEL 5",
                            ConfigValue = "400000",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4474),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("f4e7d205-20e7-4406-87c7-b54645cc4497"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 1",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4475),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("c1151cb7-b0a4-4b6b-8737-43e76a70b119"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 2",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4477),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("0a674fb0-cb37-4b75-916f-c6ba109bbdd3"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 3",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4478),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("504067fb-d30b-456a-940f-9e3f673c968f"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 4",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4482),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("8dcbc46a-4913-4166-bc76-eae7d1fad57f"),
                            ConfigName = "Số buổi học 1 tuần LEVEL 5",
                            ConfigValue = "2",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4483),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("8959f179-69d1-428c-bc26-be6d6fe5586f"),
                            ConfigName = "Tổng số buổi học LEVEL 1",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4484),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("1b028ebf-49c1-4acd-8558-36ef9e4d8429"),
                            ConfigName = "Tổng số buổi học LEVEL 2",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4486),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("16280470-7064-4122-b899-7bf5c91099ab"),
                            ConfigName = "Tổng số buổi học LEVEL 3",
                            ConfigValue = "30",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4487),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("0bc9587d-b133-47eb-8ff3-f09fe5048df2"),
                            ConfigName = "Tổng số buổi học LEVEL 4",
                            ConfigValue = "40",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4488),
                            RecordStatus = 1,
                            Role = 3
                        },
                        new
                        {
                            Id = new Guid("7a5c8678-32cc-4bd0-a2a6-ae130b22dfcf"),
                            ConfigName = "Tổng số buổi học LEVEL 5",
                            ConfigValue = "50",
                            CreatedAt = new DateTime(2025, 1, 31, 9, 7, 57, 873, DateTimeKind.Utc).AddTicks(4490),
                            RecordStatus = 1,
                            Role = 3
                        });
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EntranceTestStudentId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntranceTestStudentId");

                    b.HasIndex("Id");

                    b.HasIndex("TutionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.AccountNotification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Account")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("AccountFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Notification", "Notification")
                        .WithMany("AccountNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedClasses")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorClasses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedCriteria")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedCriteria")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedCriteria")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.DayOff", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedDayOffs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedDayOffs")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedDayOffs")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntrancesTest")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntrancesTest")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Instructor")
                        .WithMany("InstructorEntranceTests")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("EntranceTests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntrancesTest")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestResult", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedEntranceTestResult")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestResult")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("EntranceTestResults")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestResult")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("Criteria");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedEntranceTestStudent")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedEntranceTestStudent")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTest", "EntranceTest")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("EntranceTestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("EntranceTestStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedEntranceTestStudent")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EntranceTest");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.New", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedNews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletednNews")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatednNews")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", null)
                        .WithMany("ReceiverNotifications")
                        .HasForeignKey("AccountFirebaseId");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedRoom")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedRoom")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedRoom")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.SlotStudent", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreateBy")
                        .WithMany("CreatedSlotStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedSlotStudents")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Slot", "Slot")
                        .WithMany("SlotStudents")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "StudentAccount")
                        .WithMany("SlotStudents")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedSlotStudents")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreateBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Slot");

                    b.Navigation("StudentAccount");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedStudentClass")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "DeletedBy")
                        .WithMany("DeletedStudentClass")
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentFirebaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "UpdateBy")
                        .WithMany("UpdatedStudentClass")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Student");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClassScore", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Criteria", "Criteria")
                        .WithMany("StudentClassScoreCriterias")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("StudentClassScores")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Transaction", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Account", "CreatedBy")
                        .WithMany("CreatedTransaction")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", "EntranceTestStudent")
                        .WithMany("Transactions")
                        .HasForeignKey("EntranceTestStudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.Tution", "Tution")
                        .WithMany("TransactionTutions")
                        .HasForeignKey("TutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("EntranceTestStudent");

                    b.Navigation("Tution");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.HasOne("PhotonPiano.DataAccess.Models.Entity.StudentClass", "StudentClass")
                        .WithMany("Tutions")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Account", b =>
                {
                    b.Navigation("AccountNotifications");

                    b.Navigation("CreatedClasses");

                    b.Navigation("CreatedCriteria");

                    b.Navigation("CreatedDayOffs");

                    b.Navigation("CreatedEntranceTestResult");

                    b.Navigation("CreatedEntranceTestStudent");

                    b.Navigation("CreatedEntrancesTest");

                    b.Navigation("CreatedNews");

                    b.Navigation("CreatedRoom");

                    b.Navigation("CreatedSlotStudents");

                    b.Navigation("CreatedStudentClass");

                    b.Navigation("CreatedTransaction");

                    b.Navigation("DeletedClasses");

                    b.Navigation("DeletedCriteria");

                    b.Navigation("DeletedDayOffs");

                    b.Navigation("DeletedEntranceTestResult");

                    b.Navigation("DeletedEntranceTestStudent");

                    b.Navigation("DeletedEntrancesTest");

                    b.Navigation("DeletedRoom");

                    b.Navigation("DeletedSlotStudents");

                    b.Navigation("DeletedStudentClass");

                    b.Navigation("DeletednNews");

                    b.Navigation("EntranceTestStudents");

                    b.Navigation("InstructorClasses");

                    b.Navigation("InstructorEntranceTests");

                    b.Navigation("ReceiverNotifications");

                    b.Navigation("SlotStudents");

                    b.Navigation("StudentClasses");

                    b.Navigation("UpdatedClasses");

                    b.Navigation("UpdatedCriteria");

                    b.Navigation("UpdatedDayOffs");

                    b.Navigation("UpdatedEntranceTestResult");

                    b.Navigation("UpdatedEntranceTestStudent");

                    b.Navigation("UpdatedEntrancesTest");

                    b.Navigation("UpdatedRoom");

                    b.Navigation("UpdatedSlotStudents");

                    b.Navigation("UpdatedStudentClass");

                    b.Navigation("UpdatednNews");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Class", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Criteria", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("StudentClassScoreCriterias");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTest", b =>
                {
                    b.Navigation("EntranceTestStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.EntranceTestStudent", b =>
                {
                    b.Navigation("EntranceTestResults");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Notification", b =>
                {
                    b.Navigation("AccountNotifications");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Room", b =>
                {
                    b.Navigation("EntranceTests");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Slot", b =>
                {
                    b.Navigation("SlotStudents");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.StudentClass", b =>
                {
                    b.Navigation("StudentClassScores");

                    b.Navigation("Tutions");
                });

            modelBuilder.Entity("PhotonPiano.DataAccess.Models.Entity.Tution", b =>
                {
                    b.Navigation("TransactionTutions");
                });
#pragma warning restore 612, 618
        }
    }
}
